# AUTOGENERATED! DO NOT EDIT! File to edit: 04_plotting.ipynb (unless otherwise specified).

__all__ = ['lookup_rcparam', 'myimshow', 'myinteract', 'imshowlowhigh', 'add_ticks_to_x',
           'get_res_radius_from_res_name', 'logger', 'resonance_table', 'interpolators']

# Cell
from pathlib import Path
import logging
import matplotlib.pyplot as plt
import numpy as np
from astropy import units as u
from ipywidgets import fixed, interact

from pyciss2.ringutils import which_epi_janus_resonance, get_all_prime_resonances
# from pyciss2.ringcube import RingCube


logger = logging.getLogger(__name__)

resonance_table = get_all_prime_resonances()

interpolators = [
    "none",
    "nearest",
    "bilinear",
    "bicubic",
    "spline16",
    "spline36",
    "hanning",
    "hamming",
    "hermite",
    "kaiser",
    "quadric",
    "catrom",
    "gaussian",
    "bessel",
    "mitchell",
    "sinc",
    "lanczos",
]


def lookup_rcparam(rcParams, pattern):
    """Look up a pattern in the matplotlib rcParams dict.

    Just a little helper to get to the right MPL settings faster.
    """
    return [i for i in rcParams.keys() if pattern in i]


def myimshow(img, vmin, vmax, i, cmap="gray"):
    _, ax = plt.subplots(nrows=2, figsize=(10, 10))
    ax, ax2 = ax
    ax.imshow(
        img,
        vmin=vmin,
        vmax=vmax,
        aspect="auto",
        interpolation=interpolators[i],
        cmap=cmap,
    )
    ax.set_title(
        "vmin: {:.2f}, vmax: {:.2f}, interpolator:{}".format(
            vmin, vmax, interpolators[i]
        )
    )
    tohist = img[~np.isnan(img)]
    p1, p99 = np.percentile(tohist, (0.5, 99.5))
    ax2.hist(img[~np.isnan(img)], 100, range=(p1, p99))
    plt.show()


def myinteract(img):
    min_ = round(np.nanmin(img), 4)
    max_ = round(np.nanmax(img), 4)
    p30, p70 = np.percentile(img[~np.isnan(img)], (30, 70))
    delta = round((p30 - min_) / 50, 5)
    interact(
        myimshow,
        img=fixed(img),
        vmin=(min_, p30, delta),
        vmax=(p70, max_, delta),
        i=(0, len(interpolators) - 1),
    )


def imshowlowhigh(data, low=10, high=90):
    fig, ax = plt.subplots()
    plow, phigh = np.percentile(data[~np.isnan(data)], (low, high))
    ax.imshow(data, vmin=plow, vmax=phigh, cmap="gray", interpolation="sinc")
    return fig


def add_ticks_to_x(ax, newticks, newnames):
    """Add new ticks to an axis.

    I use this for the right-hand plotting of resonance names in my plots.
    """
    ticks = list(ax.get_xticks())
    ticks.extend(newticks)
    ax.set_xticks(ticks)

    names = list(ax.get_xticklabels())
    names.extend(newnames)
    ax.set_xticklabels(names)


def get_res_radius_from_res_name(res_name, cube):
    moon, resonance = res_name.split()
    moon = which_epi_janus_resonance(moon, cube.imagetime)
    row = resonance_table.query("moon==@moon and reson==@resonance")
    return row.squeeze()["radius"] * u.km